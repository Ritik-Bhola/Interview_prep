1. Select query for a specific columns => SELECT column, another_column, … FROM mytable;
2. Select query for all columns => SELECT * FROM mytable;
3. Select query with constraints => SELECT column, another_column, … FROM mytable WHERE condition     AND/OR another_condition     AND/OR …;
4. Operator	Condition for Numbers :
=, !=, <, <=, >, >=	 -- Standard numerical operators	col_name != 4
BETWEEN … AND …	-- Number is within range of two values (inclusive)	col_name BETWEEN 1.5 AND 10.5
NOT BETWEEN … AND …	-- Number is not within range of two values (inclusive)	col_name NOT BETWEEN 1 AND 10
IN (…)	-- Number exists in a list	col_name IN (2, 4, 6)
NOT IN (…)	-- Number does not exist in a list	col_name NOT IN (1, 3, 5)
5. Operator	Condition for String :
=	-- Case sensitive exact string comparison (notice the single equals)	col_name = "abc"
!= or <>	-- Case sensitive exact string inequality comparison	col_name != "abcd"
LIKE	-- Case insensitive exact string comparison	col_name LIKE "ABC"
NOT LIKE	--  Case insensitive exact string inequality comparison	col_name NOT LIKE "ABCD"
%	-- Used anywhere in a string to match a sequence of zero or more characters (only with LIKE or NOT LIKE)	col_name LIKE "%AT%" (matches "AT", "ATTIC", "CAT" or even "BATS")
_	Used anywhere in a string to match a single character (only with LIKE or NOT LIKE)	col_name LIKE "AN_" (matches "AND", but not "AN")
IN (…)	-- String exists in a list	col_name IN ("A", "B", "C")
NOT IN (…)	-- String does not exist in a list	col_name NOT IN ("D", "E", "F")

SQL Lesson 4: Filtering and sorting Query results

6. SELECT DISTINCT column, another_column, … FROM mytable WHERE condition(s);
7. SELECT column, another_column, … FROM mytableWHERE condition(s) ORDER BY column ASC/DESC;
8. SELECT column, another_column, … FROM mytable WHERE condition(s) ORDER BY column ASC/DESC LIMIT num_limit OFFSET num_offset;

Multi-table queries with JOINs

9. SELECT column, another_table_column, …
FROM mytable
INNER JOIN another_table 
    ON mytable.id = another_table.id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

OUTER JOINs

10. SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

NULLs

11. SELECT column, another_column, …
FROM mytable
WHERE column IS/IS NOT NULL
AND/OR another_condition
AND/OR …;

12. Common aggregate functions

Function	Description
COUNT(*), -- COUNT(column)	A common function used to counts the number of rows in the group if no column name is specified. Otherwise, count the number of rows in the group with non-NULL values in the specified column.
MIN(column)	-- Finds the smallest numerical value in the specified column for all rows in the group.
MAX(column)	-- Finds the largest numerical value in the specified column for all rows in the group.
AVG(column)	-- Finds the average numerical value in the specified column for all rows in the group.
SUM(column)	-- Finds the sum of all numerical values in the specified column for the rows in the group.



