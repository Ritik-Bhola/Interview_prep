1. A shell script is a computer program designed to be run by the Unix/Linux shell which could be one of the following:
The Bourne Shell
The C Shell
The Korn Shell
The GNU Bourne-Again Shell

A shell is a command-line interpreter and typical operations performed by shell scripts include file manipulation, program execution, and printing text.
Shell scripts and functions are both interpreted. This means they are not compiled.

2. How to determine Shell => echo $SHELL

3. Shell Comments --
You can put your comments in your script as follows −
#!/bin/bash

# Script follows here:
pwd
ls

Save the above content and make the script executable −
$chmod +x test.sh

The shell script is now ready to be executed −
$./test.sh

Note − To execute a program available in the current directory, use ./program_name

4. Variable Names --
The name of a variable can contain only letters (a to z or A to Z), numbers ( 0 to 9) or the underscore character ( _).

Defining Variables --
variable_name=variable_value

Accessing Values --
To access the value stored in a variable, prefix its name with the dollar sign ($) −

For example, the following script will access the value of defined variable NAME and print it on STDOUT −
#!/bin/sh

NAME="Ritik"
echo $NAME

Read-only Variables --
Shell provides a way to mark variables as read-only by using the read-only command. After a variable is marked read-only, its value cannot be changed.

For example, the following script generates an error while trying to change the value of NAME −

#!/bin/sh

NAME="Ritik"
readonly NAME
NAME="xyz"

The above script will generate the following result −
/bin/sh: NAME: This variable is read only.

Unsetting Variables --
Unsetting or deleting a variable directs the shell to remove the variable from the list of variables that it tracks. Once you unset a variable, you cannot access the stored value in the variable.
unset variable_name

The above command unsets the value of a defined variable. Here is a simple example that demonstrates how the command works −
#!/bin/sh

NAME="Ritik"
unset NAME
echo $NAME

The above example does not print anything. You cannot use the unset command to unset variables that are marked readonly.

Variable Types --
When a shell is running, three main types of variables are present −

Local Variables − A local variable is a variable that is present within the current instance of the shell. It is not available to programs that are started by the shell. They are set at the command prompt.

Environment Variables − An environment variable is available to any child process of the shell. Some programs need environment variables in order to function correctly. Usually, a shell script defines only those environment variables that are needed by the programs that it runs.

Shell Variables − A shell variable is a special variable that is set by the shell and is required by the shell in order to function correctly. Some of these variables are environment variables whereas others are local variables.

Special Variables --

$0 - The filename of the current script.	
$n - These variables correspond to the arguments with which a script was invoked. Here n is a positive decimal number corresponding to the position of an argument (the first argument is $1, the second argument is $2, and so on).
$# -The number of arguments supplied to a script.
$* - All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.
$@ - All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent to $1 $2.
$? - The exit status of the last command executed.
$$ - The process number of the current shell. For shell scripts, this is the process ID under which they are executing.
$! -The process number of the last background command.

Special Parameters $* and $@ --
There are special parameters that allow accessing all the command-line arguments at once. $* and $@ both will act the same unless they are enclosed in double quotes, "".

Exit Status --
The $? variable represents the exit status of the previous command.

 5. Arrays --
Following is the simplest method of creating an array variable. This helps assign a value to one of its indices.

array_name[index]=value

Example -
NAME[0]="Zara"
NAME[1]="Qadir"
NAME[2]="Mahnaz"
NAME[3]="Ayan"
NAME[4]="Daisy"

Accessing Array Values --
After you have set any array variable, you access it as follows −

${array_name[index]}

Example -
#!/bin/sh

NAME[0]="Zara"
NAME[1]="Qadir"
NAME[2]="Mahnaz"
NAME[3]="Ayan"
NAME[4]="Daisy"
echo "First Index: ${NAME[0]}" 

result −
$./test.sh
First Index: Zara
Second Index: Qadir

You can access all the items in an array in one of the following ways −
${array_name[*]}
${array_name[@]}
echo "Second Index: ${NAME[1]}"

Getting specific values of array -
echo "${array_name[*]:1}"
echo "${array_name[*]:1:2}"

6. Basic Operators --

Arithmetic Operators
Relational Operators
Boolean Operators
String Operators
File Test Operators

Bourne shell didn't originally have any mechanism to perform simple arithmetic operations but it uses external programs, either awk or expr.

The following example shows how to add two numbers −

#!/bin/sh

val=`expr 2 + 2`
echo "Total value : $val"

The above script will generate the following result −
Total value : 4

7. Command to check which shells are present on the system - cat /etc/shells




